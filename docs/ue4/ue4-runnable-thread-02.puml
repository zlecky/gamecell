@startuml

' Runnable objects
interface FRunnable << Interface for "runnable" objects >> #LightGray {
    + {method} virtual bool Init()
    + {method} virtual uint32 Run() = 0
    + {method} virtual void Exit()

    + {method} virtual class FSingleThreadRunnable* GetSingleThreadInterface()
}

interface FSingleThreadRunnable << Interface for ticking "runnable" objects >> #LightGray {
    + {method} virtual void Tick() = 0;
}

class MyFRunnable #LightGray {
    + {method} virtual bool Init() override
    + {method} virtual uint32 Run() override
    + {method} virtual void Exit() override
}

class FTcpListener #LightGray {
    + {method} virtual bool Init() override
    + {method} virtual uint32 Run() override
    + {method} virtual void Exit() override
}

' Runnable threads.
interface FRunnableThread << Interface for "runnable" threads >> #AAAAA {
    # {field} FRunnable* Runnable;

    + {method} static FRunnableThread* Create(FRunnable* InRunnable, ...)

    + {method} virtual bool CreateInternal() = 0
}

class FFakeThread <<Fake thread created when multi-threading is disabled.>> #AAAAA {
    + {method} virtual void Tick() override // Tick one time per frame.

    # {field} FSingleThreadRunnable* SingleThreadRunnable;
}

class FRunnableThreadPThread #AAAAA {
    + {method} virtual bool CreateInternal() override
}

class FRunnableThreadWin #AAAAA {
    + {method} virtual bool CreateInternal() override
}

class FRunnableThreadApple #AAAAA {

}

' Thread manager.
class FThreadManager #DarkGray {
    + {field} TMap<uint32, class FRunnableThread*, TInlineSetAllocator<256>> Threads

    + {method} void AddThread(uint32 ThreadId, class FRunnableThread* Thread)
    + {method} void RemoveThread(class FRunnableThread* Thread)

    + {method} void Tick() // Ticks all fake threads and their runnable objects.
}

' Runnable objects
class FUdpMessageProcessor #LightGray {
    + {method} virtual bool Init() override
    + {method} virtual uint32 Run() override
    + {method} virtual void Exit() override

    + {method} virtual void Tick() override
    + {method} virtual class FSingleThreadRunnable* GetSingleThreadInterface() override
}

' Runnable objects
FRunnable "1" *-- "1" FRunnableThread : contains

FRunnable <|-- FTcpListener
FRunnable <|-- MyFRunnable
FRunnable <|-- FUdpMessageProcessor
FSingleThreadRunnable <|-- FUdpMessageProcessor

' Runnable threads
FRunnableThread <|-- FFakeThread
FRunnableThread <|-- FRunnableThreadWin
FRunnableThread <|-- FRunnableThreadPThread
FRunnableThreadPThread <|-- FRunnableThreadApple

FRunnableThread "m" *-- "1" FThreadManager : contains
FSingleThreadRunnable "1" *-- "1" FFakeThread : contains

@enduml